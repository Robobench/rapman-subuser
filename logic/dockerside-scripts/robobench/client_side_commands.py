#!/usr/bin/env python
# This file is a driver that reads a configuration file for available demos and 
# optimizations. 

import sys,os,subprocess
import json
import optparse


# List of useful defaults
_DEFAULT_CONFIG_PATH="/subuser/command_options.json"



#def printHelp():
#    print("You can use one of the following commands:")
#    print("  list - see the available demos and benchmarks in this app image")
#    print("  enter -  drop into a shell after starting up the image" )
#    print("  [benchark_name or demo_name] - run the named demo. Run the list command for more information. ")

def listApps(configDict):
    """

    :param configDict:
    :return:
    """
    print("---Available Commands---")
    for command in configDict:
        print("-")
        print "command: %s: %s\n"%(command, configDict[command]["command"])
        print "description: %s %s\n"%(command, configDict[command]["description"])




def getConfig(options):
    """
    :param parser: the parser storing the command line options
    :type parser: optparse.OptionParser
    :return:
    """

    if not os.path.exists(options.configFilename):
        print("Failed to load config file: %s. Does file exist?"%(options.configFilename))
        return {}

    try:
        with open(options.configFilename, 'r') as fp:
            json_string = fp.read()
            command_config = json.loads(json_string)
            command_dict = {command_option["name"]:command_option for command_option in command_config["command_options"]}
            return command_dict
    except Exception as e:
        print e
        print("Failed to load config file. Does your rappman package specify one?")
        return {}


def commandOptions(parser):
    advancedOptions = optparse.OptionGroup(parser, "Advanced Options")
    advancedOptions.add_option("--config-path", action="store", type="string", dest="configFilename", default=_DEFAULT_CONFIG_PATH)
    advancedOptions.add_option("--list-apps", action="store_true", default=False, dest="listApps")
    return advancedOptions

def parseCLiArgs(sysargs):
    usage= "usage: rapman run %image [--help|--list-apps|--enter| demo_name]. Should not be used outside of the context of rapman except by advanced users"
    description="""Run commands available inside the guest image

EXAMPLE:

    $ client_side_commands pr2_interactive_manipulation grasp_demo
    """
    parser = optparse.OptionParser(usage=usage, description=description)
    advanced_options = commandOptions(parser)
    parser.add_option_group(advanced_options)

    return parser.parse_args(args=sysargs)

def insertEnterCommand(configDict):
    configDict["enter"] = {"command" : "/bin/bash",
                             "name" : "enter",
                             "description" : "Enter a shell on the container. (AUTOGENERATED OPTION)",
                             "tags" : ["utility"]}
    return configDict


def runCommand(configDict, args):
    name = args[0]
    if name not in configDict:
        print("Command %s: not in known commands"%(name))
    runCommand = configDict[name]['command']
    runArgs = [runCommand] + args[1:]

    print('Running command: %s'%(' '.join(runArgs)))
    subprocess.call(runArgs)

def run(args):
    options, args = parseCLiArgs(args)
    # find the configuration

    configDict = getConfig(options)

    configDict = insertEnterCommand(configDict)


    if options.listApps:
        listApps(configDict)
        return

    runCommand(configDict, args)



def test(args = []):
    def get_test_config_path():
        return os.path.join(os.path.dirname(os.path.realpath(__file__)),"test_command_options.json")
    args = args + ["--config-path=%s"%(get_test_config_path()), "enter"]
    print args
    run(args)

if __name__=="__main__":
    test(sys.argv[1:])
